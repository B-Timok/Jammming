{"ast":null,"code":"const clientId='da7781f650f24f528cd8b42e8b202ac8';const redirectUri='http://localhost:3000/';let accessToken;const Spotify={getAccessToken(){if(accessToken){return accessToken;}const accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);const expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];const expiresIn=Number(expiresInMatch[1]);window.setTimeout(()=>accessToken='',expiresIn*1000);window.history.pushState('Access Token',null,'/');// This clears the parameters, allowing us to grab a new access token when it expires.\nreturn accessToken;}else{const accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search(term){const accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(response=>{return response.json();}).then(jsonResponse=>{if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(track=>({id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri}));});},savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}const accessToken=Spotify.getAccessToken();const headers={Authorization:\"Bearer \".concat(accessToken)};let userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(response=>response.json()).then(jsonResponse=>{userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(response=>response.json()).then(jsonResponse=>{const playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["/workspaces/Jammming/src/utils/Spotify.js"],"sourcesContent":["const clientId = 'da7781f650f24f528cd8b42e8b202ac8';\nconst redirectUri = 'http://localhost:3000/'; \nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n        return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]);\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n        return accessToken;\n    } else {\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n    }).then(response => {\n        return response.json();\n    }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n            return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n        return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({name: name})\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n            const playlistId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({uris: trackUris})\n            });\n        });\n    });\n  }\n};\n\nexport default Spotify;\n"],"mappings":"AAAA,KAAM,CAAAA,QAAQ,CAAG,kCAAkC,CACnD,KAAM,CAAAC,WAAW,CAAG,wBAAwB,CAC5C,GAAI,CAAAC,WAAW,CAEf,KAAM,CAAAC,OAAO,CAAG,CACdC,cAAcA,CAAA,CAAG,CACf,GAAIF,WAAW,CAAE,CACb,MAAO,CAAAA,WAAW,CACtB,CAEA,KAAM,CAAAG,gBAAgB,CAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,sBAAsB,CAAC,CAC3E,KAAM,CAAAC,cAAc,CAAGJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC,CAEvE,GAAIJ,gBAAgB,EAAIK,cAAc,CAAE,CACpCR,WAAW,CAAGG,gBAAgB,CAAC,CAAC,CAAC,CACjC,KAAM,CAAAM,SAAS,CAAGC,MAAM,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC,CAC3CJ,MAAM,CAACO,UAAU,CAAC,IAAMX,WAAW,CAAG,EAAE,CAAES,SAAS,CAAG,IAAI,CAAC,CAC3DL,MAAM,CAACQ,OAAO,CAACC,SAAS,CAAC,cAAc,CAAE,IAAI,CAAE,GAAG,CAAC,CAAE;AACrD,MAAO,CAAAb,WAAW,CACtB,CAAC,IAAM,CACH,KAAM,CAAAc,SAAS,qDAAAC,MAAA,CAAuDjB,QAAQ,oEAAAiB,MAAA,CAAkEhB,WAAW,CAAE,CAC7JK,MAAM,CAACC,QAAQ,CAAGS,SAAS,CAC/B,CACF,CAAC,CAEDE,MAAMA,CAACC,IAAI,CAAE,CACX,KAAM,CAAAjB,WAAW,CAAGC,OAAO,CAACC,cAAc,CAAC,CAAC,CAC5C,MAAO,CAAAgB,KAAK,mDAAAH,MAAA,CAAmDE,IAAI,EAAI,CACnEE,OAAO,CAAE,CACLC,aAAa,WAAAL,MAAA,CAAYf,WAAW,CACxC,CACJ,CAAC,CAAC,CAACqB,IAAI,CAACC,QAAQ,EAAI,CAChB,MAAO,CAAAA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAC1B,CAAC,CAAC,CAACF,IAAI,CAACG,YAAY,EAAI,CACpB,GAAI,CAACA,YAAY,CAACC,MAAM,CAAE,CACtB,MAAO,EAAE,CACb,CACA,MAAO,CAAAD,YAAY,CAACC,MAAM,CAACC,KAAK,CAACC,GAAG,CAACC,KAAK,GAAK,CAC3CC,EAAE,CAAED,KAAK,CAACC,EAAE,CACZC,IAAI,CAAEF,KAAK,CAACE,IAAI,CAChBC,MAAM,CAAEH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAACF,IAAI,CAC7BG,KAAK,CAAEL,KAAK,CAACK,KAAK,CAACH,IAAI,CACvBI,GAAG,CAAEN,KAAK,CAACM,GACf,CAAC,CAAC,CAAC,CACP,CAAC,CAAC,CACJ,CAAC,CAEDC,YAAYA,CAACL,IAAI,CAAEM,SAAS,CAAE,CAC5B,GAAI,CAACN,IAAI,EAAI,CAACM,SAAS,CAACC,MAAM,CAAE,CAC5B,OACJ,CAEA,KAAM,CAAArC,WAAW,CAAGC,OAAO,CAACC,cAAc,CAAC,CAAC,CAC5C,KAAM,CAAAiB,OAAO,CAAG,CAAEC,aAAa,WAAAL,MAAA,CAAYf,WAAW,CAAG,CAAC,CAC1D,GAAI,CAAAsC,MAAM,CAEV,MAAO,CAAApB,KAAK,CAAC,+BAA+B,CAAE,CAACC,OAAO,CAAEA,OAAO,CAC/D,CAAC,CAACE,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CACjC,CAAC,CAACF,IAAI,CAACG,YAAY,EAAI,CACnBc,MAAM,CAAGd,YAAY,CAACK,EAAE,CACxB,MAAO,CAAAX,KAAK,qCAAAH,MAAA,CAAqCuB,MAAM,eAAc,CACjEnB,OAAO,CAAEA,OAAO,CAChBoB,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACZ,IAAI,CAAEA,IAAI,CAAC,CACrC,CAAC,CAAC,CAACT,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAClC,CAAC,CAACF,IAAI,CAACG,YAAY,EAAI,CACnB,KAAM,CAAAmB,UAAU,CAAGnB,YAAY,CAACK,EAAE,CAClC,MAAO,CAAAX,KAAK,qCAAAH,MAAA,CAAqCuB,MAAM,gBAAAvB,MAAA,CAAc4B,UAAU,YAAW,CAC1FxB,OAAO,CAAEA,OAAO,CAChBoB,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACE,IAAI,CAAER,SAAS,CAAC,CACtC,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAC,CAAC,CACJ,CACF,CAAC,CAED,cAAe,CAAAnC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}